/**
 * @description 移动端布局开发解决方案
 */
;
(function(win, xy) {
    var dpr, rem, timer,
        doc = win.document,
        docEl = doc.documentElement,
        flexible = xy.flexible || (xy.flexible = {}); // 为导出一些全局属性/方法做准备

    // 根据devicePixelRatio计算scale(页面缩放值)
    // 解决以下问题：
    // 1.保证不同设备下的统一视觉体验。
    // 2.支持任意尺寸的设计图，不再局限于[640,750,1125]
    // 3.有效解决移动端真实1像素问题

    (function() {
        var scale,
            viewportEl = doc.querySelector('meta[name="viewport"]');

        //判断Ios
        // var isIPhone = win.navigator.userAgent.match(/iphone/gi);

        //dpr = win.devicePixelRatio || 1;
        // 计算scale
        var dpr = win.devicePixelRatio;


        if (dpr >= 3 && (!dpr || dpr >= 3)) {

            dpr = 2;

        } else if (dpr >= 2 && (!dpr || dpr >= 2)) {
            dpr = 2;
        } else {
            dpr = 1;
        }

        scale = 1 / dpr;

        // 设置data-dpr属性，留作设置字号时的css hack之用
        docEl.setAttribute('data-dpr', dpr);

        // 设置viewport，进行缩放，达到高清效果
        var content = 'width=device-width, initial-scale=' + scale + ', minimum-scale=' + scale + ', maximum-scale=' + scale + ', user-scalable=no';
        if (viewportEl) {
            viewportEl.setAttribute('content', content);
        } else {
            viewportEl = doc.createElement('meta');
            viewportEl.setAttribute('name', 'viewport');
            viewportEl.setAttribute('content', content);
            (doc.head || docEl.firstElementChild).appendChild(viewportEl);
        }
    })();

    // 设置rem的基数
    (function() {
        var BASE_FONT_SIZE = 100; // 基准字号值
        var BASE_CLIENT_WIDTH = 750; // 基准视口宽度
        var MAX_CLIENT_WIDTH = 600; // 限定的最大视口值
        var resizeEvt = 'orientationchange' in win ? 'orientationchange' : 'resize';

        // 设置rem的基数
        var setRootFontSize = function() {
            var innerWidth = docEl.clientWidth;
            if (innerWidth / dpr > MAX_CLIENT_WIDTH) {
                innerWidth = MAX_CLIENT_WIDTH * dpr;
            }
            rem = Math.floor(innerWidth / BASE_CLIENT_WIDTH * BASE_FONT_SIZE);
            docEl.style.fontSize = rem + 'px';
        };

        win.addEventListener(resizeEvt, function() {
            timer && clearTimeout(timer);
            timer = setTimeout(setRootFontSize, 300);
        }, false);

        win.addEventListener('pageshow', function(e) {
            // 如果页面是从bfcache(往返缓存)中加载的
            if (e.persisted) {
                timer && clearTimeout(timer);
                timer = setTimeout(setRootFontSize, 300);
            }
        }, false);

        doc.addEventListener('DOMContentLoaded', setRootFontSize, false);

        // 直接调用
        setRootFontSize();
    })();

    // 把一些可能会用到的属性或方法暴露到全局环境
    flexible.dpr = dpr;
    flexible.rem = rem;

    // 提供某一dpr下rem和px之间的转换函数
    flexible.rem2px = function(v) {
        var val = parseFloat(v) * this.rem;
        // 如果传进来的rem值带有'rem'单位，则转换成的值就带有'px'
        if (typeof v === 'string' && v.match(/rem$/)) {
            val += 'px';
        }
        return val;
    }
    flexible.px2rem = function(v) {
        var val = parseFloat(v) / this.rem;
        // 如果传进来的px值带有'px'单位，则转换成的值就带有'rem'
        if (typeof v === 'string' && v.match(/px$/)) {
            val += 'rem';
        }
        return val;
    }

})(window, window.xy || (window.xy = {}));
